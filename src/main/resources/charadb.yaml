openapi: 3.0.4
info:
  title: Genshin Character Database - OpenAPI 3.0
  description: |-
  version: 1.0.12
tags:
  - name: Character
    description: Manage characters in the Genshin character database
  - name: Team
    description: Manages teams comprised of characters.
paths:
  /characters:
    get:
      tags:
        - Character
      summary: Returns a list of characters available.
      description: Returns a list of characters available. If parameters are specified, then a list of characters matching the parameters will be returned.
      operationId: getCharacters
      parameters:
        - name: element
          in: query
          description: Used to filter characters by element.
          required: false
          schema:
            $ref: '#/components/schemas/Element'
        - name: weapon
          in: query
          description: Used to filter characters by weapon type.
          required: false
          schema:
            $ref: '#/components/schemas/WeaponType'
        - name: rarity
          in: query
          description: Used to filter characters by rarity.
          required: false
          schema:
            $ref: '#/components/schemas/Rarity'
      responses:
        '200':
          description: Characters successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
        '400':
          description: Bad request. Invalid value in one of the parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Character
      summary: Creates a new character
      description: Creates a new character entry. This endpoint accepts character details such as name, element, weapon type, rarity, and stores them in the database.
      operationId: createCharacter
      requestBody:
        description: Create a new character
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterCreateRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /characters/{characterId}:
    get:
      tags:
        - Character
      summary: Fetches a character by id
      description: Multiple status values can be provided with comma separated strings.
      operationId: getCharacterById
      parameters:
        - name: characterId
          in: path
          description: The ID of the character being fetched
          required: true
          schema:
            $ref: '#/components/schemas/CharacterId'
      responses:
        '200':
          description: Character is retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'

        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Character
      summary: Updates a character.
      description: Updates a character, using only the parameters specified in the request. All parameters are optional.
      operationId: updateCharacter
      parameters:
        - name: characterId
          in: path
          description: ID of character that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/CharacterId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterUpdateRequest'
        required: true
      responses:
        '200':
          description: Character is successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
            application/xml:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Character
      summary: Deletes a character.
      description: Delete a character.
      operationId: deleteCharacter
      parameters:
        - name: characterId
          in: path
          description: ID of the character to be deleted
          required: true
          schema:
            $ref: "#/components/schemas/CharacterId"
      responses:
        '204':
          description: Character successfully deleted.
        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /teams:
    get:
      tags:
        - Team
      summary: Returns a list of teams existing in the system.
      description: Returns a list of all the teams existing in the system.
      operationId: getTeams
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Team
      summary: Creates a new team.
      description: Creates a new team. Name is required, but members are optional. If no members are provided, an empty team will be created.
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'

      responses:
        '201':
          description: Team is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /teams/{teamId}:
    patch:
      tags:
        - Team
      summary: Updates an existing team.
      description: Updates an existing team based on the parameters specified. If the members parameter is present but empty, the team's member list will be cleared.
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          description: The ID of the team being updated.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdateRequest'
      responses:
        '200':
          description: Team is successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Team
      summary: Deletes a team.
      description: Deletes a team.
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          description: ID of the team that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content. Team has successfully been deleted.
        '400':
          description: Bad request. Invalid value in one or more parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Element:
      type: string
      description: Element of the vision held by the character (not counting delusions)
      enum:
        - ELECTRO
        - CRYO
        - DENDRO
        - HYDRO
        - GEO
        - ANEMO
        - PYRO
    WeaponType:
      type: string
      description: Weapon held by the character
      enum:
        - BOW
        - SWORD
        - CLAYMORE
        - CATALYST
        - POLEARM
    Rarity:
      type: string
      description: Rarity of the character
      enum:
        - FOURSTAR
        - FIVESTAR
        - COLLAB
    CharacterId:
      type: string
      pattern: '^[a-zA-Z0-9_]+$' # Alphanumeric characters and underscores
      minLength: 1
      maxLength: 50
      description: Unique ID to identify the character
      example: ayaka
    Character:
      required:
        - id
        - displayName
        - rarity
        - element
        - weapon
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CharacterId'
        displayName:
          type: string
          description: Full known name of the character
          example: Kamisato Ayaka
        element:
          $ref: '#/components/schemas/Element'
        weapon:
          $ref: '#/components/schemas/WeaponType'
        rarity:
          $ref: '#/components/schemas/Rarity'
    CharacterUpdateRequest:
      type: object
      properties:
        displayName:
          type: string
          description: Full known name of the character
          example: Kamisato Ayaka
        element:
          $ref: '#/components/schemas/Element'
        weapon:
          $ref: '#/components/schemas/WeaponType'
        rarity:
          $ref: '#/components/schemas/Rarity'
    CharacterCreateRequest:
      required:
        - displayName
        - element
        - weapon
        - rarity
      type: object
      properties:
        displayName:
          type: string
          description: Full known name of the character
          example: Kamisato Ayaka
        element:
          $ref: '#/components/schemas/Element'
        weapon:
          $ref: '#/components/schemas/WeaponType'
        rarity:
          $ref: '#/components/schemas/Rarity'
    Team:
      required:
        - id
        - name
        - members
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/CharacterId'
    TeamUpdateRequest:
      type: object
      properties:
        name:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/CharacterId'
    TeamCreateRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/CharacterId'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
